<%- include('partials/_header', { title: 'Chat with ' + receiverUsername }); %>

  <div class="container-fluid vh-100 d-flex flex-column">
    <div class="row flex-grow-1">
      <!-- Sidebar (Hidden on Mobile) -->
      <div id="sidebar" class="col-lg-3 d-none d-lg-block bg-primary p-3">
        <%- include('partials/_sidebar', { users, token , friendRequests }); %>
      </div>

      <!-- Chat Window -->
      <div id="chat-window-container" class="col-lg-9 d-flex flex-column bg-light p-0">
        <!-- Chat Header (Fixed) -->
        <div class="bg-primary p-2 d-flex gap-2 text-white">
          <div class="d-flex align-items-center gap-2">
          <a class="d-block d-lg-none text-white text-decoration-none" href="/users/select-receiver">
            <i class="ri-arrow-left-line"></i>
          </a>
            <div class="rounded-circle overflow-hidden border border-1" style="width: 40px; height: 40px;">
              <img src="/<%=receiver.avatar_url%>" alt="<%=receiver.username%>'s avatar" class="img-fluid rounded-circle" width="40px" height="40px">
            </div>
            <strong>
              <%= receiverUsername %>
            </strong>
            <div class="typing"></div>
          </div>
        </div>

        <!-- Chat Messages (Scrollable) -->
        <div id="chat-window" class="flex-grow-1 overflow-auto p-3">
          <% messages.forEach(message=> { %>
            <% if(message.is_deleted===1) { %>
              <div class="message">
                <div class="message-content <%= message.sender_id === userId ? 'sent' : 'received' %> px-2 py-1 mb-2 rounded">
                  <p class="mb-1 text-muted deleted-message" style="font-style: italic;"> <i class="<%= message.sender_id === userId ? '' : 'text-white' %>">This message has been deleted.</i></p>
                </div>
              </div>
              <% } else { %>
                <div class="message"
                  id="message-container-<%= message.id %>">
                    <div class="message-content <%= message.sender_id === userId ? 'sent' : 'received' %> py-1 px-2 mb-2 rounded position-relative">
                      <% if (message.sender_id===userId) { %>
                        <div class="message-dropdown position-absolute">
                          <div class="btn-group dropstart">
                            <button type="button" style="padding: 0 0 4px !important;"
                              class="btn btn-sm bg-transparent p-0 border-0 m-0 rounded-circle dropdown-toggle"
                              data-bs-toggle="dropdown" aria-expanded="false">
                            </button>
                            <ul class="dropdown-menu">
                              <li class="dropdown-item">
                                <button class="dropdown-item"
                                  onclick="editMessage('<%= message.id %>','<%= token %>','<%= receiverId %>')">
                                  <i class="ri-pencil-line"></i> Edit
                                </button>
                              </li>
                              <li class="dropdown-item">
                                <form id="deleteMessageForm" class="m-0 p-0">
                                  <input type="hidden" name="token" value="<%= token %>">
                                  <input type="hidden" name="receiverId" value="<%= receiverId %>">
                                  <button type="button" class="dropdown-item"
                                    onclick="deleteMessage('<%= message.id %>', '<%= token %>', '<%= receiverId %>')">
                                    <i class="ri-delete-bin-5-line"></i> Delete
                                  </button>
                                </form>
                              </li>
                            </ul>
                          </div>
                        </div>
                        <% } %>
                      <% if (message.image_url) { %>
                        <div class="message-image-content">
                          <img src="<%= message.image_url %>" alt="Sent Image" class="message-image">
                        </div>
                        <% } %>
                          <div class="message-text-content">
                            <p class="message-text-body">
                              <%= message.message %>
                            </p>
                            <small class="text-muted">
                              <%= message.created_at %>
                            </small>
                          </div>
                    </div>
                </div>
                <% } %>
                  <% }) %>
        </div>

        <!-- Message Form (Fixed at Bottom) -->
        <div class="bg-primary p-2 position-relative">
          <form class="d-flex gap-2 align-items-center" id="message-form">
            <!-- Add a file input for image uploads -->
            <input type="file" id="file-input" accept="image/*" style="display: none;">
            <button type="button" id="file-upload-button" class="btn">
              <i class="ri-add-circle-line text-white fs-3"></i>
            </button>
            <input type="hidden" name="receiverId" value="<%= receiverId %>">
            <input type="hidden" name="token" value="<%= token %>">
            <textarea name="message" rows="1" id="message" placeholder="Type your message..."
              class="form-control outline-0 border-0" required></textarea>
            <button type="submit" class="btn">Send</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const userId = "<%= userId %>";
    const messageForm = document.getElementById("message-form");
    const messageInput = document.getElementById("message");
    const typingContainer = document.querySelector(".typing");
    const fileInput = document.getElementById("file-input");
    const fileUploadButton = document.getElementById("file-upload-button");
    let typingTimeout;

    // Trigger file input when the upload button is clicked
    fileUploadButton.addEventListener("click", () => {
      fileInput.click();
    });
    // Handle form submission
    messageForm.addEventListener("submit", async (event) => {
      event.preventDefault();
      const message = messageInput.value.trim();
      const file = fileInput.files[0];

      if (!message && !file) {
        alert("Please enter a message or select an image.");
        return;
      }

      let imageUrl = null;

      // If a file is selected, upload it and get the image URL
      if (file) {
        const formData = new FormData();
        formData.append("image", file);

        try {
          const uploadResponse = await fetch("/upload", {
            method: "POST",
            body: formData,
          });
          const data = await uploadResponse.json();
          imageUrl = data.imageUrl;
        } catch (error) {
          console.error("Error uploading image:", error);
          alert("Failed to upload image. Please try again.");
          return;
        }
      }

      // Send the message and image URL to the server
      socket.emit("send_message", {
        message,
        imageUrl,
        receiverId,
        senderId: userId,
      });

      // Clear the input fields
      messageInput.value = "";
      fileInput.value = "";
    });


    function stopTyping() {
      socket.emit("stop typing");
    }


    messageInput.addEventListener("input", () => {
      socket.emit("typing", "Typing . . .");
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(stopTyping, 500);
    });


    socket.on("message_updated", (data) => {
      const messageContainer = document.getElementById(`message-container-${data.messageId}`);
      if (messageContainer) {
        // Update the message content
        messageContainer.innerHTML = `
      <div class="message-content ${data.senderId === userId ? 'sent' : 'received'} px-2 py-1 mb-2 rounded position-relative">
        ${data.senderId === userId ? `
        <div class="message-dropdown position-absolute">
          <div class="btn-group dropstart">
            <button type="button" style="padding: 0 0 4px !important;"
              class="btn btn-sm bg-transparent p-0 border-0 m-0 rounded-circle dropdown-toggle"
              data-bs-toggle="dropdown" aria-expanded="false">
            </button>
            <ul class="dropdown-menu">
              <li class="dropdown-item">
                <button class="dropdown-item"
                  onclick="editMessage(${data.messageId},${data.receiverId})">
                  <i class="ri-pencil-line"></i> Edit
                </button>
              </li>
              <li class="dropdown-item">
                <button type="button" class="dropdown-item"
                  onclick="deleteMessage(${data.messageId},${data.receiverId})">
                  <i class="ri-delete-bin-5-line"></i> Delete
                </button>
              </li>
            </ul>
          </div>
        </div>` : ''}
         ${(data.imageUrl) ? `
              <div class="message-image-content">
                <img src="${data.imageUrl}" alt="Sent Image" class="message-image">
              </div>
        ` : ''}
        <div class="message-text-content">
        <p class="message-text-body">
          ${data.newMessage}
        </p>
        <small class="text-muted">
          ${data.created_at ? data.created_at : new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}          </small>
        </small>
      </div>
      </div>        
    `;
      }
    });

    socket.on("receive_message", (data) => {
      const messageContainer = document.createElement("div");

      // Add the message ID to the container
      messageContainer.id = `message-container-${data.id}`;
      messageContainer.classList.add("message");
      // Render the message with the ID and timestamp
      messageContainer.innerHTML = `
        <div class="message-content ${data.senderId === userId ? 'sent' : 'received'} px-2 py-1 mb-2 rounded position-relative">
          ${data.senderId === userId ? `
      <div class="message-dropdown position-absolute">
            <div class="btn-group dropstart">
              <button type="button" style="padding: 0 0 4px !important;"
                class="btn btn-sm bg-transparent p-0 border-0 m-0 rounded-circle dropdown-toggle"
                data-bs-toggle="dropdown" aria-expanded="false">
              </button>
              <ul class="dropdown-menu">
                <li class="dropdown-item">
                  <button class="dropdown-item"
                    onclick="editMessage(${data.id},${receiverId})">
                    <i class="ri-pencil-line"></i> Edit
                  </button>
                </li>
                <li class="dropdown-item">
                  <form id="deleteMessageForm" class="m-0 p-0">
                    <input type="hidden" name="token" value="<%= token %>">
                    <input type="hidden" name="receiverId" value="${receiverId}">
                    <button type="button" class="dropdown-item"
                      onclick="deleteMessage(${data.id}, ${receiverId})">
                      <i class="ri-delete-bin-5-line"></i> Delete
                    </button>
                  </form>
                </li>
              </ul>
            </div>
          </div>` : ''}
           ${(data.imageUrl) ? `
              <div class="message-image-content">
                <img src="${data.imageUrl}" alt="Sent Image" class="message-image">
              </div>
        ` : ''}
          <div class="message-text-content">
            <p class="message-text-body">
              ${data.message}
            </p>
            <small class="text-muted">
               ${data.created_at ? data.created_at : new Date().toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true })}
            </small>
          </div>
        </div>
      `;

      document.getElementById("chat-window").appendChild(messageContainer);
      scrollToBottom();
    });

    socket.on("message_deleted", (data) => {
      const messageContainer = document.getElementById(`message-container-${data.messageId}`);
      console.log("data :",data);
      if (messageContainer) {
        // Update the message content to show it has been deleted
        messageContainer.innerHTML = `
      <div class="message-content ${data.receiverId === userId ? 'received' : 'sent'}  px-2 py-1 mb-2 rounded">
        <p class="mb-1 text-muted deleted-message" style="font-style: italic;">
          <i class="${data.receiverId === userId ? 'text-white' : ''}">This message has been deleted.</i>
        </p>
      </div>
    `;

        // Remove the dropdown menu (edit/delete buttons)
        const dropdown = messageContainer.querySelector(".message-dropdown");
        if (dropdown) {
          dropdown.remove();
        }
      }
    });

    socket.on("typing", () => {
      typingContainer.textContent = "Typing . . .";
    });

    socket.on("stop typing", () => {
      typingContainer.textContent = "";
    });
  </script>
  <script src="/js/chat/scrollToBottom.js"></script>
  <script src="/js/chat/editAndDeleteMessage.js"></script>
  <%- include('partials/_footer') %>